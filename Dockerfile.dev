# Multi-stage build for smaller image size
FROM node:20-alpine3.19 AS builder

# Install build dependencies
RUN apk add --no-cache g++ make py3-pip

# Install pnpm
RUN npm --no-update-notifier --no-fund --global install pnpm@10.6.1

WORKDIR /app

# Copy package files first for better caching
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/*/package.json ./apps/*/
COPY libraries/*/package.json ./libraries/*/

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy source code
COPY . .

# Build the application
RUN pnpm run build

# Production stage
FROM node:20-alpine3.19 AS production

# Install runtime dependencies only
RUN apk add --no-cache supervisor bash caddy pm2

# Install pnpm (smaller footprint)
RUN npm --no-update-notifier --no-fund --global install pnpm@10.6.1

WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/*/package.json ./apps/*/
COPY libraries/*/package.json ./libraries/*/

# Install production dependencies only
RUN pnpm install --frozen-lockfile --prod

# Copy built application from builder stage
COPY --from=builder /app/apps/frontend/.next ./apps/frontend/.next
COPY --from=builder /app/apps/backend/dist ./apps/backend/dist
COPY --from=builder /app/apps/workers/dist ./apps/workers/dist
COPY --from=builder /app/apps/cron/dist ./apps/cron/dist
COPY --from=builder /app/libraries ./libraries

# Copy configuration files
COPY var/docker/supervisord.conf /etc/supervisord.conf
COPY var/docker/Caddyfile /app/Caddyfile
COPY var/docker/entrypoint.sh /app/entrypoint.sh
COPY var/docker/supervisord/caddy.conf /etc/supervisor.d/caddy.conf

RUN chmod +x /app/entrypoint.sh

# Clean up unnecessary files
RUN rm -rf /root/.npm /root/.pnpm-store /tmp/* /var/cache/apk/*

EXPOSE 4200

CMD ["pnpm", "run", "pm2"]
